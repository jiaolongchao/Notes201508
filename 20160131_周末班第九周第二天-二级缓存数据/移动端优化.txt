[减少资源文件的大小/减少资源请求的次数]
http://tool.css-js.com/

1、我们的JS/CSS文件最好一个页面只用一个,需要把JS/CSS进行合并压缩,并且减少页面中的垃圾冗余代码->我们的资源文件在服务器上最好做一下GZIP压缩
  [解除文件缓存->我们修改代码并上传,如果之前页面访问过该网站,很有可能不能立即见效]我们在引入CSS/JS文件的时候,在文件名的后面加上版本号(加时间戳)
  <script src='index.js?_=201601311606'></script>
  //当我们上传新的文件后把时间戳改一下就可以清除缓存了

2、移动端尽量少用图片(icon能用svg画的不用图片,对于一些图片尽量和设计沟通少用)

   静态资源图:做布局的时候就能确定下来的图片
   1)css sprite图片合并(针对于小图片)
   2)做图片延迟加载(针对于大图片 头部的长条图片、背景大图...):开始给一张默认的小的图片(最好维持在10kb以内)
   3)如果以上优化了,我们还没有解决加载慢的问题,我们在尝试最后一步操作:base64 (页面的代码太臃肿了,以后维护不好操作) ->如果项目中由于图片太大我们是在解决不了,改成base64都解决了

   动态数据图:通过ajax从后台读取回来的图片
   1)图片延迟加载(第三周图片延迟加载实战案例)

3、音视频文件的优化：加载页面的时候,尽量不要加载音视频文件，当页面中的其他资源加载完成后在开始加载音视频文件; ->目前移动端经常给音视频做的优化是：走直播流文件(音频 后缀名是m3u8格式)

4、减少页面资源请求的次数:如果当前只是一个宣传页,或者是一个简单的页面->我们的css和js采用内嵌式开发

5、我们的ajax数据请求分批请求
   例如：一次要请求10000条数据的话,我们每一次只请求100条,第一屏幕肯定能看全了,当页面滚动到对应的其它屏幕的时候,在加载下一个100条...(数据异步加载 微博、京东、淘宝 上拉/下拉刷新)

6、做数据的二次缓存:当我们第一次把数据请求回来,保存在本地浏览器中,第二次加载这个页面就不要在从新读取了,直接的从本地缓存中读取即可

7、代码优化：
   能用CSS3做动画的绝对不用JS,能使用transform尽量使用,能用animation的进行不用transition...
   尽量减少同步操作,多用异步操作
   ......
   能使用原生JS自己编写的绝对不用插件或者框架