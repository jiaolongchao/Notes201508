1、使用的setTimeout来实现轮询动画的时候,为了节省性能(把不在执行的定时器进行销毁),我们在每一次执行方法前,首先把上一次创建的定时器清除掉
  [案例]
  var timer=null;
  function move(){
      window.clearTimeout(timer);//->进来执行的第一步就是把之前创造的定时器垃圾进行销毁
      <js code>
      timer=window.setTimeout(move,1000);
  }
  move();

2、我们设置定时器的时候,会定义一个timer的变量来存储我们的定时器的返回值,但是如果定义为全局变量,很容易造成相互之间的冲突->为了解决这个问题,我们把timer设置为当前要操作元素的自定义属性
  [案例]
  function move() {
      window.clearTimeout(oDiv.timer);
      <js code>
      oDiv.timer = window.setTimeout(move, 10);
  }
  这样做的话还有一个好处:当前元素的第一个动画如果没有执行完,进行下一个动画的话,我们都会把之前的动画清除掉(因为每一次执行方法之前都是 window.clearTimeout(oDiv.timer),而我们的每一个动画的timer都在当前元素的同一个自定义属性上)


3、当我们的move方法执行的时候如果需要传递参数的话,我们按照如下方式用setTimeout实现轮询动画
   function move(target) {
        window.clearTimeout(oDiv.timer);
        <js code>
        oDiv.timer = window.setTimeout(function () {
              move(target);
        }, 10);
   }
   问题:这样做的话,我们每一次重新设置的定时器中的匿名函数,执行形成的那个私有的作用域是不销毁的(参考图1),这样的话执行100次,就形成了100个不销毁的私有的作用域,非常的浪费性能
   [解决]
   function move(target) {
       ~function _move(){
            window.clearTimeout(oDiv.timer);
            <js code>
            oDiv.timer=window.setTimeout(_move,10);
       }();
   }
   //这样解决的话,每一次执行_move形成的私有的作用域是都可以销毁的,只有move形成的这个私有的作用域不销毁即可

4、为了防止在边界的时候,我们多走一步超过目标值,但是不走还到达不了目标,我们在做边界的判断的时候,加上每一次的步长来判断->加上步长判断,其实相当于假设我们多走一步会不会比边界大,如果真的大了,我们直接让其跳到边界即可
   [案例]
   if (curL + 10 >= target) {//->已经走到左边的边界了
       oDiv.style.left = target + "px";
       return;
   }

