JS中处理兼容的方式总结:

1、使用try、catch来处理兼容
  ->原理:在try中让JS代码执行,如果执行过程中报错了,说明不兼容,我们在catch中用其他的方式来实现我们的兼容处理
  ->前提:不兼容的情况下执行报错才可以
  ->弊端:不管当前的浏览器是否兼容,都要先把try中的代码执行一遍,不兼容在走catch,性能上相对来说浪费一些
  listToArray:function(likeAry){
      var ary=[];
      try{
         ary=Array.prototype.slice.call(likeAry);//->正常执行的JS代码,在IE6~8下执行会报错
      }catch(e){
         //->如果不兼容的话我们用for循环来实现将类数组转换为数组
         for(var i=0;i<likeAry.length;i++){
            ary[ary.length]=likeAry[i];
         }
      }
      return ary;
  }

2、判断是否存在对应的属性,来确定浏览器是否兼容(这种方式是最常用的)
  ->例如:获取元素的样式,我们在标准浏览器中使用window.getComputedStyle,在IE6~8使用currentStyle

  [第一种写法]
  function getCss(curEle,attr){
     var val=null;
     if(window.getComputedStyle){//->获取window下getComputedStyle的属性值,如果当前浏览器兼容返回的是一个函数,不兼容返回的是undefined;然后把获取的值转换为布尔类型看真假,如果是真说明兼容,为假说明不兼容
        val=window.getComputedStyle(curEle,null)[attr];
     }else{
        val=curEle.currentStyle[attr];
     }
     return val;
  }

  [第二种写法]
  function getCss(curEle,attr){
     var val=null;
     if(typeof window.getComputedStyle==="function"){//->获取window下getComputedStyle的属性值,如果当前浏览器兼容返回的是一个函数,不兼容返回的是undefined;然后把返回的值用typeof检测,判断是否等于"function",等于的话兼容,反之不兼容
        val=window.getComputedStyle(curEle,null)[attr];
     }else{
        val=curEle.currentStyle[attr];
     }
     return val;
  }

  [第三种写法]
  function getCss(curEle,attr){
     var val=null;
     if("getComputedStyle" in window){//->直接判断window下是否有getComputedStyle这个属性,有的话返回true,没有的话返回false
        val=window.getComputedStyle(curEle,null)[attr];
     }else{
        val=curEle.currentStyle[attr];
     }
     return val;
  }

3、直接判断当前的浏览器是哪一个浏览器,从而进行兼容性处理
  ->例如:获取元素的样式,我们在标准浏览器中使用window.getComputedStyle,在IE6~8使用currentStyle
  ->使用window.navigator.userAgent来获取当前浏览器的版本信息

  function getCss(curEle,attr){
     var val=null;
     var reg=/MSIE [6-8]\.0/;
     if(reg.test(navigator.userAgent)){
        val=curEle.currentStyle[attr];
     }else{
        val=window.getComputedStyle(curEle,null)[attr];
     }
     return val;
  }